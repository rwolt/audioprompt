#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'EOF'
Usage: audioprompt <command> [args]

Commands:
  analyze <in.wav> [--bands N] [--bins M] [--outdir DIR] [--print-eq]
  prompt  <in.wav> <out.wav> [--duration S] [--max-gain dB]
  prepend <prompt.wav> <seed.wav> <out.wav>

Notes:
  - analyze writes profile.txt (N lines, 0..255) and profile.json
  - prompt generates pink‑noise shaped by an inverse EQ from the profile
  - prepend concatenates prompt + seed at 48 kHz, preserving channels
EOF
}

err() { echo "[audioprompt] $*" >&2; }

cmd=${1:-}
[[ -z "$cmd" ]] && { usage; exit 2; }
shift || true

analyze() {
  local in="$1"; shift
  local bands=1024 bins=24 outdir="." print_eq=0
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --bands) bands="$2"; shift 2;;
      --bins)  bins="$2"; shift 2;;
      --outdir) outdir="$2"; shift 2;;
      --print-eq) print_eq=1; shift;;
      *) err "Unknown arg: $1"; exit 2;;
    esac
  done
  [[ -f "$in" ]] || { err "Input not found: $in"; exit 1; }
  mkdir -p "$outdir"

  local raw="$outdir/profile.raw" txt="$outdir/profile.txt" json="$outdir/profile.json"
  # 1xBANDS grayscale column = time‑averaged spectrum (area scale collapses time)
  ffmpeg -v error -i "$in" -filter_complex \
    "[0:a]aformat=channel_layouts=mono,aresample=48000,showspectrum=s=512x${bands}:mode=combined:scale=log:legend=disabled:win_func=hann:overlap=0.8:color=intensity,format=gray,scale=1:${bands}:flags=area" \
    -frames:v 1 -pix_fmt gray -f rawvideo - > "$raw"
  # Convert raw bytes to 0..255 integers (top→bottom). Reverse to low→high.
  od -An -tu1 -w1 -v "$raw" | awk 'NF{print $1}' | tac > "$txt"

  # Downsample to BINS and emit JSON + gain entries
  local eq entries
  entries=$(awk -v bins="$bins" '
    function clamp(x,a,b){ return x<a?a:(x>b?b:x) }
    BEGIN{ i=0; }
    { v[i++]=$1+0 }
    END{
      n=i; if(n==0){ print ""; exit }
      # 24 log‑spaced centers (31 Hz .. 15 kHz)
      split("31,41,53,69,90,117,153,200,262,343,449,588,770,1008,1320,1728,2263,2964,3883,5085,6658,8718,11417,14945", C, ",");
      if(bins!=24){ # linear fallback
        for(k=0;k<bins;k++){ idx=int(k*n/bins); sel[k]=idx }
      }
      sum=0; for(k=0;k<n;k++) sum+=v[k]; avg=(n?sum/n:0);
      # build JSON array, simple mapping: gain = 6 - (val/255)*6 dB
      printf "{\"bins\":%d,\"avg\":%.2f,\"values\":[", bins, avg;
      for(b=0;b<24;b++){
        idx=int(b*n/24);
        val=v[idx]; if(val=="") val=0;
        if(b) printf ","; printf "%d", val;
      }
      printf "],\"eq\":[";
      for(b=0;b<24;b++){
        idx=int(b*n/24); val=v[idx]; if(val=="") val=0;
        g = 6 - (val/255.0)*6; g = clamp(g,-3,9);
        if(b) printf ","; printf "{\"f\":%d,\"g\":%.2f}", C[b+1], g;
      }
      printf "]}"
    }' "$txt")
  echo "$entries" > "$json"

  if (( print_eq )); then
    echo "$entries" | awk 'BEGIN{ RS=","; } /\"f\":/ && /\"g\":/ { sub(/.*\"f\":/ ,""); f=$0; sub(/,\"g\":.*$/, "", f); g=$0; sub(/.*\"g\":/ ,"", g); sub(/}.*/, "", g); printf("entry(%s,%s);", f,g); }'
  else
    echo "Wrote $txt and $json"
  fi
}

prompt() {
  local in="$1" out="$2"; shift 2
  local duration=6 max_gain=6 tmpdir
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --duration) duration="$2"; shift 2;;
      --max-gain) max_gain="$2"; shift 2;;
      *) err "Unknown arg: $1"; exit 2;;
    esac
  done
  tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t ap)
  trap 'rm -rf "$tmpdir"' EXIT
  analyze "$in" --outdir "$tmpdir" >/dev/null
  local eq
  eq=$(awk -v MG="$max_gain" 'function clamp(x,a,b){ return x<a?a:(x>b?b:x) } BEGIN{ i=0 } {v[i++]=$1+0} END{ n=i; split("31,41,53,69,90,117,153,200,262,343,449,588,770,1008,1320,1728,2263,2964,3883,5085,6658,8718,11417,14945", C, ","); for(b=0;b<24;b++){ idx=int(b*n/24); val=v[idx]; g = MG - (val/255.0)*MG; g=clamp(g,-3, MG+0); printf("entry(%d,%.2f);", C[b+1], g) } }' "$tmpdir/profile.txt")
  ffmpeg -v error -f lavfi -t "$duration" -i anoisesrc=color=pink:amplitude=0.08 \
    -af "firequalizer=gain_entry='${eq}',alimiter=limit=0.9" -ar 48000 -ac 1 -y "$out"
  echo "Wrote $out"
}

prepend() {
  local p="$1" s="$2" o="$3"
  [[ -f "$p" && -f "$s" ]] || { err "Missing files"; exit 2; }
  ffmpeg -v error -i "$p" -i "$s" -filter_complex "[0:a][1:a]concat=n=2:v=0:a=1[a]" -map "[a]" -ar 48000 -y "$o"
  echo "Wrote $o"
}

case "$cmd" in
  analyze) analyze "$@";;
  prompt)  prompt  "$@";;
  prepend) prepend "$@";;
  *) usage; exit 2;;
esac

